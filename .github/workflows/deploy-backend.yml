name: Build & Deploy Backend (Docker)

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'packages/db/**'
      - 'packages/validators/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Enable corepack and setup pnpm
      run: |
        corepack enable
        corepack prepare pnpm@8.15.1 --activate

    - name: Cache pnpm store
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install All Workspace Dependencies
      run: pnpm install

    - name: Cache Turbo Cache
      uses: actions/cache@v3
      with:
        path: .turbo
        key: ${{ runner.os }}-turbo-${{ hashFiles('**/*.[tj]s', '**/tsconfig.json') }}
        restore-keys: |
          ${{ runner.os }}-turbo-

    - name: Type Check
      run: pnpm turbo run typecheck --filter=backend

    - name: Build Backend with Dependencies
      run: NODE_ENV=production pnpm turbo run build --filter=backend...

    - name: Install Backend Production Dependencies
      run: pnpm --filter=backend install --prod

    - name: Confirm Backend Build Output Exists
      run: ls -l apps/backend/dist

    - name: Confirm Backend node_modules Exists
      run: ls -l apps/backend/node_modules

    - name: Build Docker Image
      run: docker build -t ai-job-tracker-backend -f apps/backend/Dockerfile .

    - name: Save Docker Image to Tarball
      run: docker save ai-job-tracker-backend > backend.tar

    - name: Upload Docker Image via SCP
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "backend.tar"
        target: "/home/ubuntu/ai-job-tracker"

    - name: Load and Run Docker Image on Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /home/ubuntu/ai-job-tracker

          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "PORT=3001" >> .env
          echo "CLIENT_ORIGIN=https://ai-job-tracker-monorepo-frontend.vercel.app" >> .env

          docker load < backend.tar
          docker stop backend || true
          docker rm backend || true
          docker run -d \
            --name backend \
            --env-file .env \
            -p 3001:3001 \
            ai-job-tracker-backend
